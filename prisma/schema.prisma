generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fieldReference"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Route {
  id             Int              @id @default(autoincrement())
  name           String           @default("")
  amount_rates   Int              @default(0)
  rate           Float            @default(0)
  difficulty     Int              @default(0)
  popularity     Float            @default(0)
  langtitudes    Float[]
  longtitudes    Float[]
  rest_points    RestPoints[]
  FinishedRoutes FinishedRoutes[]
}

model RestPoints {
  id          Int    @id @default(autoincrement())
  name        String @default("")
  langtitude  Float  @default(0)
  longtitude  Float  @default(0)
  capacity    Int    @default(0)
  description String @default("")
  Route       Route? @relation(fields: [routeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  routeId     Int?
}

model Chat {
  id       Int       @id @default(autoincrement())
  name     String
  users    User[]
  messages Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  Chat      Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId    Int?
  createdAt DateTime @default(now())
  message   String
}

model FinishedRoutes {
  id         Int      @id @default(autoincrement())
  route      Route    @relation(fields: [route_id], references: [id])
  route_id   Int
  start_date DateTime @default(now())
  end_date   DateTime @default(now())
  rate       Float    @default(5)
  User       User?    @relation(fields: [userId], references: [id])
  userId     Int?
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  password       String
  username       String           @default("")
  full_name      String           @default("")
  phone_number   String           @default("")
  icon           String           @default("/DefaultIcon.svg")
  finishedRoutes FinishedRoutes[]
  chats          Chat[]
  Messsage       Message[]

  orders    Order[]
  followers Follows[] @relation("following")
  following Follows[] @relation("follower")
  roles     Role[]
  Cart      Cart[]
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followingId Int

  @@id([followerId, followingId])
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model Equipment {
  id               Int                @id @default(autoincrement())
  name             String
  price            Float
  characteristic   String
  latitude         Float              @default(0)
  longitude        Float              @default(0)
  amount           Int
  CartItem         CartItem[]
  OrderedEquipment OrderedEquipment[]
}

model Cart {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime @default(now())
  returnDate DateTime @default(now())

  cartItems CartItem[]
}

model CartItem {
  id          Int       @id @default(autoincrement())
  cartId      Int
  cart        Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  equipmentId Int
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  amount      Int
}

model Order {
  id               Int                @id @default(autoincrement())
  borrow_date      DateTime           @default(now())
  return_date      DateTime           @default(now())
  claims           String             @default("")
  user             User               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id          Int
  checked          Boolean            @default(false)
  returned         Boolean            @default(false)

  OrderedEquipment OrderedEquipment[]
}

model OrderedEquipment {
  equipment    Equipment @relation(fields: [equipment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  order        Order     @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  equipment_id Int
  order_id     Int
  amount       Int

  @@id([equipment_id, order_id])
}

generator dbml {
  provider = "prisma-dbml-generator"
}
